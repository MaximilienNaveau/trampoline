name: GameCI Release ðŸŽ®

on:
  workflow_dispatch: # Manually triggered
  push:
    tags:
      - 'v[0-9]+.[0-9]+.[0-9]+'

jobs:
  testRunner:
    name: Build my project âœ¨
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          lfs: true

      - name: Create LFS file list
        run: git lfs ls-files -l | cut -d' ' -f1 | sort > .lfs-assets-id
      
      - name: Restore LFS cache
        uses: actions/cache@v4
        id: lfs-cache
        with:
          path: .git/lfs
          key: ${{ runner.os }}-lfs-${{ hashFiles('.lfs-assets-id') }}
      
      - name: Git LFS Pull
        run: |
          git lfs pull
          git add .
          git reset --hard

      # Cache
      - uses: actions/cache@v3
        with:
          path: Library
          key: Library-${{ hashFiles('Assets/**', 'Packages/**', 'ProjectSettings/**') }}
          restore-keys: |
            Library-

      # Test
      - name: Run tests
        id: testRunner
        uses: game-ci/unity-test-runner@v4
        env:
          UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
          UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
          UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
        with:
          githubToken: ${{ secrets.GITHUB_TOKEN }}
          projectPath: trampoline # Specify the path to your Unity project

      # Output
      - uses: actions/upload-artifact@v4
        if: always()
        with:
          name: Test-results
          path: ${{ steps.testRunner.outputs.artifactsPath }}

      - uses: actions/upload-artifact@v4
        if: always()
        with:
          name: Coverage-results
          path: ${{ steps.testRunner.outputs.coveragePath }}

  buildForAllSupportedPlatforms:
    needs: testRunner
    name: Build for ${{ matrix.targetPlatform }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        targetPlatform:
          - StandaloneLinux64 # Build a Linux 64-bit standalone.
          - Android # Build an Android .apk standalone app.
          - WebGL # WebGL.
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          lfs: true
      
      - name: Create LFS file list
        run: git lfs ls-files -l | cut -d' ' -f1 | sort > .lfs-assets-id
      
      - name: Restore LFS cache
        uses: actions/cache@v4
        id: lfs-cache
        with:
          path: .git/lfs
          key: ${{ runner.os }}-lfs-${{ hashFiles('.lfs-assets-id') }}
      
      - name: Git LFS Pull
        run: |
          git lfs pull
          git add .
          git reset --hard
      
      - name: Fetch all tags
        run: git fetch --tags

      - name: Get the latest tag
        id: get_latest_tag
        run: |
          latest_tag=$(git tag -l 'v[0-9]*.[0-9]*.[0-9]*' --sort=-v:refname | head -n 1)
          echo "latest_tag=$latest_tag" >> $GITHUB_ENV

      # Cache
      - name: Restore Library cache
        if: matrix.targetPlatform != 'Android' # Skip for Android
        uses: actions/cache@v4
        with:
          path: trampoline/Library
          key: Library-${{ matrix.targetPlatform }}-${{ hashFiles('Assets/**', 'Packages/**', 'ProjectSettings/**') }}
          restore-keys: |
            Library-${{ matrix.targetPlatform }}

      - name: Decode Android keystore
        if: matrix.targetPlatform == 'Android'
        run: |
          echo "${{ secrets.ANDROID_KEYSTORE_BASE64 }}" | base64 -d > ../build-key.keystore
        env:
          ANDROID_KEYSTORE_NAME: ../build-key.keystore

      - name: Check if keystore exists
        if: matrix.targetPlatform == 'Android'
        run: |
          ls -l ../build-key.keystore || echo "Keystore not found!"

      - uses: game-ci/unity-builder@v4
        env:
          UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
          UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
          UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
          ANDROID_KEYSTORE_NAME: ../build-key.keystore
          ANDROID_KEYSTORE_BASE64: ${{ secrets.ANDROID_KEYSTORE_BASE64 }}
          ANDROID_KEYSTORE_PASS: ${{ secrets.ANDROID_KEYSTORE_PASS }}
          ANDROID_KEY_ALIAS_NAME: ${{ secrets.ANDROID_KEY_ALIAS_NAME }}
          ANDROID_KEY_ALIAS_PASS: ${{ secrets.ANDROID_KEY_ALIAS_PASS }}
        with:
          buildName: trampoline_${{ matrix.targetPlatform }}_${{ env.latest_tag }} # Use the latest tag for the build name
          targetPlatform: ${{ matrix.targetPlatform }}
          githubToken: ${{ secrets.GITHUB_TOKEN }}
          projectPath: trampoline # Specify the path to your Unity project
          androidKeystoreName: ../build-key.keystore
          androidKeystoreBase64: ${{ secrets.ANDROID_KEYSTORE_BASE64 }}
          androidKeystorePass: ${{ secrets.ANDROID_KEYSTORE_PASS }}
          androidKeyaliasName: ${{ secrets.ANDROID_KEY_ALIAS_NAME }}
          androidKeyaliasPass: ${{ secrets.ANDROID_KEY_ALIAS_PASS }}

      - uses: actions/upload-artifact@v4
        with:
          name: trampoline_${{ matrix.targetPlatform }}_${{ env.latest_tag }}
          path: build/${{ matrix.targetPlatform }}

  publishRelease:
    needs: buildForAllSupportedPlatforms
    name: Publish Release on GitHub
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Fetch all tags
        run: git fetch --tags

      - name: Get the latest tag
        id: get_latest_tag
        run: |
          latest_tag=$(git tag -l 'v[0-9]*.[0-9]*.[0-9]*' --sort=-v:refname | head -n 1)
          echo "latest_tag=$latest_tag" >> $GITHUB_ENV

      - name: Download Android APK artifact
        uses: actions/download-artifact@v4
        with:
          name: trampoline_Android_${{ env.latest_tag }}
          path: build/Android

      - name: Download WebGL artifact
        uses: actions/download-artifact@v4
        with:
          name: trampoline_WebGL_${{ env.latest_tag }}
          path: build/WebGL
      
      - name: Compress WebGL build
        run: |
          cd build/WebGL
          zip -r trampoline_WebGL_${{ env.latest_tag }}.zip ./*

      - name: Download Linux Standalone artifact
        uses: actions/download-artifact@v4
        with:
          name: trampoline_StandaloneLinux64_${{ env.latest_tag }}
          path: build/StandaloneLinux64

      - name: Compress StandaloneLinux64 build
        run: |
          cd build/StandaloneLinux64
          zip -r trampoline_StandaloneLinux64_${{ env.latest_tag }}.zip ./*

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.latest_tag }}
          release_name: Release ${{ env.latest_tag }}
          draft: false
          prerelease: false

      - name: "Display the build directory"
        run: |
          sudo apt-get install -y tree
          tree .

      - name: Upload WebGL build
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: build/WebGL/trampoline_WebGL_${{ env.latest_tag }}.zip
          asset_name: trampoline_WebGL_${{ env.latest_tag }}.zip
          asset_content_type: application/zip

      - name: Upload Android APK
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: build/Android/trampoline_Android_${{ env.latest_tag }}.apk
          asset_name: trampoline_${{ env.latest_tag }}.apk
          asset_content_type: application/vnd.android.package-archive

      - name: Upload StandaloneLinux64 build
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: build/StandaloneLinux64/trampoline_StandaloneLinux64_${{ env.latest_tag }}.zip
          asset_name: trampoline_StandaloneLinux64_${{ env.latest_tag }}.zip
          asset_content_type: application/zip

  deployPages:
    needs: buildForAllSupportedPlatforms
    name: Deploy to Github Pages ðŸš€
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Get the latest tag
        id: get_latest_tag
        run: |
          latest_tag=$(git tag -l 'v[0-9]*.[0-9]*.[0-9]*' --sort=-v:refname | head -n 1)
          echo "latest_tag=$latest_tag" >> $GITHUB_ENV


      - uses: actions/download-artifact@v4
        with:
          name: trampoline_WebGL_${{ env.latest_tag }}
          path: build/WebGL

      - name: Deploy ðŸš€
        uses: JamesIves/github-pages-deploy-action@v4.7.3
        with:
          branch: gh-pages
          folder: build/WebGL

  # deployToFdroid:
  #   needs: buildForAllSupportedPlatforms
  #   name: Publish APK to F-Droid
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v5

  #     - name: Get the latest tag
  #       id: get_latest_tag
  #       run: |
  #         git fetch --tags
  #         latest_tag=$(git tag -l 'v[0-9]*.[0-9]*.[0-9]*' --sort=-v:refname | head -n 1)
  #         echo "latest_tag=$latest_tag" >> $GITHUB_ENV

  #     - name: Setup SSH
  #       run: |
  #         mkdir -p ~/.ssh
  #         echo "${{ secrets.FDROID_SSH_KEY }}" > ~/.ssh/id_rsa
  #         chmod 600 ~/.ssh/id_rsa
  #         ssh-keyscan github.com >> ~/.ssh/known_hosts

  #     - name: Clone F-Droid repo
  #       run: git clone git@github.com:MaximilienNaveau/magamajo.git fdroid-repo
  #       working-directory: ${{ github.workspace }}

  #     - name: Download Android APK artifact
  #       uses: actions/download-artifact@v4
  #       with:
  #         name: trampoline_Android_${{ env.latest_tag }}
  #         path: build/Android

  #     - name: Display the build folder
  #       run: |
  #         sudo apt-get install -y tree
  #         tree .
  #         find -name "*.apk"
  #       working-directory: ${{ github.workspace }}
      
  #     - name: Copy APK to F-Droid repo
  #       run: |
  #         mkdir -p ${{ github.workspace }}/fdroid-repo/releases/
  #         cp build/Android/trampoline_Android_${{ env.latest_tag }}.apk ${{ github.workspace }}/fdroid-repo/releases/trampoline_${{ env.latest_tag }}.apk

  #     - name: Commit and push APK
  #       run: |
  #         cd fdroid-repo
  #         git config --global user.email "maximilien.naveau@gmail.com"
  #         git config --global user.name "Maximilien Naveau"
  #         git add trampoline_${{ env.latest_tag }}.apk
  #         git commit -m "Add new APK for ${{ env.latest_tag }}"
  #         git push origin main
